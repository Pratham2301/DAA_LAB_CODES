#include <iostream>
#define V 43
using namespace std;

/******* TEST CASE 1 *******/

// bool graph[V][V] =
//     {
//         {0, 1, 1},
//         {1, 0, 1},
//         {1, 1, 0},
// };



/******* TEST CASE 2 *******/

bool graph[V][V] = {
    {0, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0},

};



void showColors(int color[])
{
    cout << "Assigned Colors are: " << endl;
    for (int i = 0; i < V; i++)
        cout << color[i] << " ";
    cout << endl;
}



bool isValid(int v, int color[], int c)
{
    for (int i = 0; i < V; i++)
        if (graph[v][i] && c == color[i])
            return false;
    return true;
}




bool graphColoring(int colors, int color[], int vertex)
{
    if (vertex == V)
        return true;

    for (int col = 1; col <= colors; col++)
    {
        if (isValid(vertex, color, col))
        {
            color[vertex] = col;
            if (graphColoring(colors, color, vertex + 1) == true)
                return true;

            color[vertex] = 0;
        }
    }
    return false;
}




bool checkSolution(int m)
{
    int *color = new int[V];

    for (int i = 0; i < V; i++)
        color[i] = 0; // initially set to 0

    if (graphColoring(m, color, 0) == false)
    {
        cout << "Not Bicolorable";
        return false;
    }
    showColors(color);

    return true;
}




int main()
{
    int colors = 2; // Number of colors
    if (checkSolution(colors))
    {
        cout << "Bicolorable" << endl;
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////



#include <bits/stdc++.h>
using namespace std;
#define pb(x) push_back(x)
#define MAXNODE 210
#define INF INT_MAX
#define ff first
#define ss second
#define sz size()
typedef pair<int, int> pii;
typedef queue<int> qi;
vector<int> g[MAXNODE];
int d[MAXNODE];
int bfs(int n, int src)
{
    bool color[210];
    bool taken[210];
    for (int i = 0; i < n; i++)
        color[i] = false, taken[i] = false;
    int i, u, v;
    qi q;
    q.push(src);
    d[src] = 0;
    while (!q.empty())
    {
        u = q.front();
        q.pop();
        for (i = 0; i < g[u].sz; i++)
        {
            v = g[u][i];

            if (taken[v] == false)
            {
                color[v] = !color[u];
                taken[v] = true;
                q.push(v);
            }
            else if (color[u] == color[v])
            {
                cout << "NOT" << endl;
                return 0;
            }
        }
    }
    return 0;
}
int main()
{

    int n, e, i, u, v;
    while (scanf("%d", &n) && n != 0)
    {
        cin >> e;

        for (i = 0; i < n; i++)
            g[i].clear(); // forget previous info

        for (i = 0; i < e; i++)
        {
            cin >> u >> v;

            g[u].pb(v);
            g[v].pb(u);
        }

        bfs(n, 0);
        
        cout<<"BICOLORABLE"<<endl;
    }
    return 0;
}