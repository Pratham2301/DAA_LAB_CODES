#include <bits/stdc++.h>
using namespace std;

void Print2Darray(vector<vector<int>> &v)
{
    cout << endl;

    for (auto i : v)
    {
        for (auto j : i)
        {
            cout << j << " ";
        }
        cout << endl;
    }

    cout << endl;
    cout << endl;
}

void MCM(vector<vector<int>> &dp, vector<vector<int>> &s, vector<int> arr)
{
    int n = arr.size(); // 4

    for (int l = 2; l < n; l++) // 2 3
    {
        for (int i = 1; i < (n - l + 1); i++) // 1 2 3 //
        {
            int j = i + l - 1;

            // cout<<i<<" "<<j<<endl;

            dp[i][j] = INT_MAX;

            for (int k = i; k <= j - 1; k++)
            {
                cout << i << " " << j << " " << k << endl;

                cout << dp[i][k] << endl;
                cout << dp[k + 1][j] << endl;
                cout << (arr[i - 1] * arr[j] * arr[k]) << endl
                    << endl;

                int val = dp[i][k] + dp[k + 1][j] + (arr[i - 1] * arr[j] * arr[k]);

                dp[i][j] = min(dp[i][j], val);
                s[i][j] = k;
            }

            if (dp[i][j] > 100)
            {
                dp[i][j] = 0;
            }
        }
    }
}

int main()
{
    vector<int> arr = {1, 3, 2, 4};
    int n = arr.size();

    vector<vector<int>> dp(n, vector<int>(n, 0));
    vector<vector<int>> s(n, vector<int>(n, 0));

    Print2Darray(dp);

    MCM(dp, s, arr);

    Print2Darray(dp);

    return 0;
}

// 1. n length[p]-1
// 2. for i ← 1 to n
// 3. do m [i, i] ← 0
// 4. for l ← 2 to n // l is the chain length
// 5. do for i ← 1 to n-l + 1
// 6. do j ← i+ l -1
// 7. m[i,j] ← ∞
// 8. for k ← i to j-1
// 9. do q ← m [i, k] + m [k + 1, j] + p i-1 p k p j
// 10. If q &lt; m [i,j]
// 11. then m [i,j] ← q
// 12. s [i,j] ← k
// 13. return m and s.